apply plugin: 'maven-publish'

def BUILD_VERSION = '0.3'

// 源代码一起打包
task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}
artifacts {
    archives androidSourcesJar
}

afterEvaluate {
    publishing {
        publications {
            aar(MavenPublication) {
//            from components.java
                groupId "com.xxx.sdk" // 包名
                artifactId "sdk" // module的名字   这个不配置的话，默认为 library 的名字，
                version BUILD_VERSION // 版本号
                artifact androidSourcesJar
                artifact("$buildDir/outputs/aar/<sdk>-release.aar")  //<sdk>替换为Module名，可以在配置完成之后，先执行一下 build 命令，确认一下然后再调整。命令下面有介绍。

                //maven-publish does not capture dependencies from this file
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    // Iterate over the api dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.api.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
        repositories {

            maven {
                url "https://<gitlab.com>/api/v4/projects/<project_id>/packages/maven"
                //<gitlab.com> 如果是私有化部署，需替换为自己的域名 <project_id> 项目ID（在Gitlab的项目主页会有显示）
                allowInsecureProtocol true //开启支持http协议,否则强制校验https协议
                name "gitlab"
                credentials(HttpHeaderCredentials) {
                    name = "Private-Token"
                    value = "<GitLabPrivateToken>"//<GitLabPrivateToken>需要替换为你自己的Token 获取方式：gitlab进入你项目，Settings -> Access Tokens 填写信息，然后创建Accessy token
                }
                authentication {
                    header(HttpHeaderAuthentication)
                }
            }

        }
    }
}